// PACKAGES FOR ADVANCED REMESHING SCHEME
load "Curvature"
load "distance"
load "isoline"
load "gsl"

// Manage command-line arguments
include "getARGV.idp"

// include <iostream>; // If needed

int iSimul = getARGV("-i", 1);
bool debug = getARGV("-d", 1);
bool err = 0;

include "param_sets/parameters_MDCK_MCF10a_Blanch.edp"; // load the parameters
include "lib/meshes.edp"; // load the mesh generation & remeshing functions

string simulName;
string simulHomeDir;

// Mesh identifiers
// Bottom, Top, Right, Left -> Periodic 1, Periodic 2, Free, Fixed
int[int] labels = [1,3,2,4];
int labelPerio1 = labels[0];
int labelPerio2 = labels[1];
int labelFree = labels[2];
int labelFixed = labels[3];

func perio=[[1,x],[3,x]]; // Periodicity

// Problem length & timescales ----------------------------------------------------------------------------------------
real Amp = Amps[iSimul];    // Initial amplitude of the perturbation)
real qBnd = qBnds[iSimul];  // Wavenumber of the perturbation

// real Lc = Lcs[iSimul];
real lambda = sqrt(eta/xi); // hydrodynamic sceening length
real La = zetas[iSimul]/zi; // active length; < 0 (> 0) for contractile (extensile) stress
real tscale = eta/(zi*Lc);  // Problem timescale


// Problem Parameters
real a = La/Lc;             // Active length, zeta/zi, and effective radius ratio
real b = L0/lambda;         // Effective radius and hydrodynamic length, sqrt(eta/xi), ratio
real c = L0/Lc;             // Effective radius and nematic length ratio
real bLayerThickness = 1/c; // Adim. nematic length
//---------------------------------------------------------------------------------------------------------------------


// Construct the mesh -------------------------------------------------------------------------------------------------

mesh Th = meshSemiplaneSinusoidal(obd,ibd,bLayerThickness,Lx,Ly,Amp,qBnd,labels)

Th = periodicRemesh1FreeBnd(Th,obd,ibd,bLayerThickness,.5,labels) // Custom mesh adaptation

// Initial variables for shape characterization
real Area0 = Th.measure; // Inital Area of the Fluid Domain

if (debug) {
  plot(
    Th,value = true, fill = false, nbiso=64, wait=true, 
    cmm = "adaptive mesh;  A0="+Area0
  );
}
//---------------------------------------------------------------------------------------------------------------------

// Create folder structure, parameters' file & header of the global solutions' file -----------------------------------
if (bsave){
  string simulHomeDir = rootDir+"/"+simulNames[iSimul];
  string fileNameParams = "/params.csv";
  string fileNameGlobalSol = "/global_sol.csv";

  exec("mkdir "+simulHomeDir);							// Make a home directory for the simulation
  exec("mkdir "+simulHomeDir+"/msh");				// Make and save the meshes in a separeted directory
  exec("mkdir "+simulHomeDir+"/local_sol");	// Make and save the local solutions in a separeted directory

  {ofstream fileParams (simulHomeDir+fileNameParams); // Save the parameters in separate file

    fileParams.fixed;
    fileParams << "Amp,qbnd,L0,h,Lc,lambda,La,eta,xi,zi,zeta,tscale,dt,dsave"/*<< ",gamma"*/ <<  endl;
    fileParams << "um,1/um,um,um,um,um,um,kPa*s,kPa*s/um^2,kPa/um,kPa,s,adim,adim"/*<< ",kPa*um"*/ << endl;
    fileParams << Amp    << "," << qBnd   << "," << L0  << "," << h     << "," << Lc    << "," 
               << lambda << "," << La     << "," << eta << "," << xi    << "," << zi    << "," 
               << zeta   << "," << tscale << "," << dt  << "," << dsave << /*"," << gamma*/ << endl;// 
  }
  // Generate a separate file for the global variables (integrates ones)
  {ofstream fileGlobalSol (simulHomeDir+fileNameGlobalSol);	
    //fileGlobalSol.fixed;
    fileGlobalSol	<< "Time,Area,dAreadt" << endl;
  }
} 
//---------------------------------------------------------------------------------------------------------------------

// Console Log
cout << "Simul: " << simulNames[iSimul] << ", saving = " << bsave << endl;
cout << "a (La/Lc) = " << a << ", b (L0/lambda) = " << b << ", c (L0/Lc) = " << c << ", tscale = " << tscale << endl;  

// Define the macros --------------------------------------------------------------------------------------------------
macro pD [pDx, pDy] //                              // P2 extension for Dirichlet data
macro p [px, py] //                                 // Polarity vector field
macro q [qx, qy] //                                 // Polarity test functions
macro v [vx, vy] //                                 // Velocity vector field
macro u [ux, uy] //                                 // Velocity test functions

macro dp [dpxdx,dpxdy,dpydx,dpydy] //               // Gradient of the polarity field
macro dq [dqxdx,dqxdy,dqydx,dqydy] //               // Gradient of the polarity test functions
macro dv [dvxdx,dvxdy,dvydx,dvydy] //               // Gradient of the velocity field
macro du [duxdx,duxdy,duydx,duydy] //               // Gradient of the velocity test functions
macro d2px [dpxdxx,dpxdxy,dpxdyx,dpxdyy] //			    // Hessian of the x-polarity
macro d2py [dpydxx,dpydxy,dpydyx,dpydyy] //			    // Hessian of the y-polarity
macro d2qx [dqxdxx,dqxdxy,dqxdyx,dqxdyy] //			    // Hessian of the x-polarity test function
macro d2qy [dqydxx,dqydxy,dqydyx,dqydyy] //			    // Hessian of the y-polarity test 
      
macro grad(u) [dx(u),dy(u)] //                      // Gradient of a sclar
macro Grad(ux,uy) [dx(ux),dy(ux),dx(uy),dy(uy)] //  // Gradient of a vector
macro GradT(ux,uy) [dx(ux),dx(uy),dy(ux),dy(uy)] // // Grad vector transpose
macro Hessian(u) [dxx(u),dxy(u),dyx(u),dyy(u)] //	  // Hessian of a scalar
macro pp(px,py) [px*px,px*py,py*px,py*py] //        // Active stress tensor

macro Norm(u) dist(u#x,u#y) + 1.e-12 //             // Vector norm + offset to avoid 0-length vectors
//---------------------------------------------------------------------------------------------------------------------


//FEM spaces ----------------------------------------------------------------------------------------------------------
fespace Pol(Th, [P2, P2]);          // For polarity vector
fespace Pola(Th, P2 );              // For |p| (not essential, just visualization)
fespace dPol(Th,[P2,P2,P2,P2]);     // For the gradient of the polarity vector

fespace Vel(Th, [P1b, P1b]);        // For velocity vector
fespace dVel(Th,[P1b,P1b,P1b,P1b]); // For the gradient of the velocity vector
fespace prodVel(Th, P1b);

// fespace Vor(Th,P1b);								// To compute the vorticity & divergence
fespace Nh(Th,[P1,P1]);						  // For the corrected normal vector at the boundary
//---------------------------------------------------------------------------------------------------------------------


// Define & solve the polarity equations ------------------------------------------------------------------------------
// P2 extension of polarity Dirichlet data
varf bndDirichlet(pD, q) = 
  on(labelFree, pDx = N.x) + on(labelFree, pDy = N.y) 
  + on(labelFixed, pDx = 0) + on(labelFixed, pDy = 0)

Pol pD=[0,0];
pDx[] = bndDirichlet(0, Pol, tgv = 1.0);

// Bilinear and linear variational forms P (Modified Homogeneous Drirchlet problem for p-pD)
varf ap(p, q) = int2d(Th)(
    (grad(px)'*grad(qx) + grad(py)'*grad(qy))
    + c*c*(p'*q)
  )
    + on(labelFree, px = 0.0) + on(labelFree, py=0.0) 
    + on(labelFixed, px = 0.0) + on(labelFixed, py=0.0);

varf lp(p, q) = int2d(Th)(
    - (grad(pDx)'*grad(qx) + grad(pDy)'*grad(qy)) 
    - c*c*(pD'*q)
  )
    + on(labelFree, px = 0.0) + on(labelFree, py=0.0) 
    + on(labelFixed, px = 0.0) + on(labelFixed, py=0.0);

// Assembly P
matrix Ap = ap(Pol, Pol, tgv = -2); // LHS matrix
real[int] bp = lp(0, Pol); // RHS

// P solution with vanishing Dirichlet data
real[int] solP(Pol.ndof);
//set(Ap,solver=sparsesolver);
solP=Ap^-1*bp;
Pol p=[0,0];
px[]=solP(0:Pol.ndof-1);

// P solution
p = p + pD;

if (debug) {
  // plot(Th,px, value = true, fill = true, nbiso = 64, wait = true, cmm = "px", bb=[[-1.1*Ly,-Ly],[Ly,Ly]]);
  // plot(Th,py, value = true, fill = true, nbiso = 64, wait = true, cmm = "py", bb=[[-1.1*Ly,-Ly],[Ly,Ly]]);
  plot(Th,p, value = true, fill = true, nbiso = 64, wait = true, cmm = "(px,py)", bb=[[-1.1*Ly,-Ly],[Ly,Ly]]);
  Pola pABS = sqrt(px(x,y)^2 + py(x,y)^2); // Abs(P)
  plot(Th,pABS, value = true, fill = true, nbiso = 64, wait = true, cmm = "|p|", bb=[[-1.1*Ly,-Ly],[Ly,Ly]]);
}
//---------------------------------------------------------------------------------------------------------------------


// Define & solve the velocity equation -------------------------------------------------------------------------------
// Bilinear and linear variational forms V
varf av(v, u) = int2d(Th)(
    ((Grad(vx,vy)+GradT(vx,vy))'*Grad(ux,uy))
    + pow(b,2)*(v'*u)
  ) 
    + on(labelFixed, vx = 0.0) + on(labelFixed, vy = 0.0); // -viscosity -friction

varf lv(v, u) = int2d(Th)( 
    + a*(pp(px,py)'*Grad(ux,uy))
    + c*(p'*u)
  ) 
    + on(labelFixed, vx = 0.0) + on(labelFixed, vy = 0.0); //contractility +active traction

// Assembly V
matrix Av = av(Vel, Vel);
real[int] bv = lv(0, Vel);

// V solution
real[int] solV(Vel.ndof);
//set(Av,solver=sparsesolver);
solV=Av^-1*bv;
Vel v=[0,0];
vx[]=solV(0:Vel.ndof-1);

if (debug) {
  // plot(Th,vx, value = true, fill = true, nbiso = 64, wait = true, cmm = "vx", bb=[[-1.1*Ly,-Ly],[Ly,Ly]]);
  // plot(Th,vy, value = true, fill = true, nbiso = 64, wait = true, cmm = "vy", bb=[[-1.1*Ly,-Ly],[Ly,Ly]]);
  plot(Th,v, value = true, fill = true, nbiso = 64, wait = true, cmm = "(vx,vy)", bb=[[-1.1*Ly,-Ly],[Ly,Ly]]);
  Pola vABS = sqrt(vx(x,y)^2 + vy(x,y)^2); // Abs(P)
  plot(Th,vABS, value = true, fill = true, nbiso = 64, wait = true, cmm = "|v|", bb=[[-1.1*Ly,-Ly],[Ly,Ly]]);
}
//---------------------------------------------------------------------------------------------------------------------

/// Compute the gradient of p for the posterior analysis ---------------------------------------------------------------
varf aGradP(dp, dq) = int2d(Th)(dp'*dq);
varf lGradP(dp, dq) = int2d(Th)(Grad(px,py)'*dq);

matrix AGradP = aGradP(dPol, dPol); // LHS matrix
real[int] bGradP = lGradP(0, dPol); // RHS vector

real[int] solGradP(dPol.ndof);
solGradP=AGradP^-1*bGradP;
dPol dp=[0,0,0,0];
dpxdx[]=solGradP(0:dPol.ndof-1);
//---------------------------------------------------------------------------------------------------------------------

// Compute the gradient of v for the posterior analysis ---------------------------------------------------------------
varf aGradV(dv, du) = int2d(Th)(dv'*du);
varf lGradV(dv, du) = int2d(Th)(Grad(vx,vy)'*du);

matrix AGradV = aGradV(dVel, dVel);	// LHS matrix
real[int] bGradV = lGradV(0, dVel); // RHS vector

real[int] solGradV(dVel.ndof);
solGradV=AGradV^-1*bGradV;
dVel dv=[0,0,0,0];
dvxdx[]=solGradV(0:dVel.ndof-1);
//---------------------------------------------------------------------------------------------------------------------

// Compute the Hessian of px for posterior analysis
varf aHessPx(d2px,d2qx) = int2d(Th)(d2px'*d2qx);
varf lHessPx(d2px,d2qx) = int2d(Th)(Hessian(px)'*d2qx);

matrix AHessPx = aHessPx(dPol, dPol);	// LHS matrix
real[int] bHessPx = lHessPx(0, dPol);	// RHS vector

real[int] solHessPx(dPol.ndof);
solHessPx=AHessPx^-1*bHessPx;
dPol d2px=[0,0,0,0];
dpxdxx[]=solHessPx(0:dPol.ndof-1);

// Compute the Hessian of py for posterior analysis
varf aHessPy(d2py,d2qy) = int2d(Th)(d2py'*d2qy);
varf lHessPy(d2py,d2qy) = int2d(Th)(Hessian(py)'*d2qy);

matrix AHessPy = aHessPy(dPol, dPol);	// LHS matrix
real[int] bHessPy = lHessPy(0, dPol);	// RHS vector

real[int] solHessPy(dPol.ndof);
solHessPy=AHessPy^-1*bHessPy;
dPol d2py=[0,0,0,0];
dpydxx[]=solHessPy(0:dPol.ndof-1);

// Compute the intial values of the global variables ------------------------------------------------------------------
real Areai = Area0;              // Current area
real AreaP = Areai;              // Previous area
real dAreadt = (Areai-AreaP)/dt; // time-derivative of the area (backward)
//---------------------------------------------------------------------------------------------------------------------


// Time iteration -----------------------------------------------------------------------------------------------------
for (int iterTime=0 ; iterTime<NiterTime ; iterTime++) {

  if (iterTime % 100 == 0 && iterTime > 0) {
    // Console log every 100 iterations
    cout << iterTime << " out of " << NiterTime << " iterations completed" << endl;
  }

  // Solve the polarity equation --------------------------------------------------------------------------------------
  // P2 extension of polarity Dirichlet data
  varf bndDirichlet(pD, q) = on(labelOut, pDx = nx) + on(labelOut, pDy = ny);
  Pol pD=[0,0];
  pDx[] = bndDirichlet(0, Pol, tgv = 1.0);

  // Assembly P
  varf lp(p, q) = int2d(Th)(
      - (grad(pDx)'*grad(qx) + grad(pDy)'*grad(qy)) 
      - c*c*(pD'*q)
    )  
      + on(labelFree, px = 0.0) + on(labelFree, py=0.0)
      + on(labelFixed, px = 0.0) + on(labelFixed, py=0.0);

  matrix Ap = ap(Pol, Pol, tgv = -2); // LHS matrix
  real[int] bp = lp(0, Pol);          // RHS

  // P solution with vanishing Dirichlet data
  real[int] solP(Pol.ndof);
  //set(Ap,solver=sparsesolver);
  solP=Ap^-1*bp;
  Pol p=[0,0];
  px[]=solP(0:Pol.ndof-1);

  // P solution
  p = p + pD;
  //-------------------------------------------------------------------------------------------------------------------


  // Solve the velocity equation --------------------------------------------------------------------------------------
  // Assembly V
  varf lv(v, u) = int2d(Th)(
      + a*(pp(px,py)'*Grad(ux,uy))
      + c*(p'*u)
    ) 
      + on(labelFixed, vx = 0.0) + on(labelFixed, vy = 0.0); //contractility +active traction

  matrix Av = av(Vel, Vel);  // LHS matrix
  real[int] bv = lv(0, Vel); // RHS matrix

  // V solution
  real[int] solV(Vel.ndof);
  //set(Av,solver=sparsesolver);
  solV=Av^-1*bv;
  Vel v=[0,0];
  vx[]=solV(0:Vel.ndof-1);
  //-------------------------------------------------------------------------------------------------------------------

  // Compute the gradient of v for the posterior analysis -------------------------------------------------------------
  varf aGradV(dv, du) = int2d(Th)(dv'*du);
  varf lGradV(dv, du) = int2d(Th)(Grad(vx,vy)'*du);

  matrix AGradV = aGradV(dVel, dVel);	// LHS matrix
  real[int] bGradV = lGradV(0, dVel);	// RHS vector

  real[int] solGradV(dVel.ndof);
  solGradV=AGradV^-1*bGradV;
  dVel dv=[0,0,0,0];
  dvxdx[]=solGradV(0:dVel.ndof-1);
  //-------------------------------------------------------------------------------------------------------------------

  // Compute the Hessian of px for posterior analysis
  varf aHessPx(d2px,d2qx) = int2d(Th)(d2px'*d2qx);
  varf lHessPx(d2px,d2qx) = int2d(Th)(Hessian(px)'*d2qx);

  matrix AHessPx = aHessPx(dPol, dPol);	// LHS matrix
  real[int] bHessPx = lHessPx(0, dPol);	// RHS vector

  real[int] solHessPx(dPol.ndof);
  solHessPx=AHessPx^-1*bHessPx;
  dPol d2px=[0,0,0,0];
  dpxdxx[]=solHessPx(0:dPol.ndof-1);

  // Compute the Hessian of py for posterior analysis
  varf aHessPy(d2py,d2qy) = int2d(Th)(d2py'*d2qy);
  varf lHessPy(d2py,d2qy) = int2d(Th)(Hessian(py)'*d2qy);

  matrix AHessPy = aHessPy(dPol, dPol);	// LHS matrix
  real[int] bHessPy = lHessPy(0, dPol);	// RHS vector

  real[int] solHessPy(dPol.ndof);
  solHessPy=AHessPy^-1*bHessPy;
  dPol d2py=[0,0,0,0];
  dpydxx[]=solHessPy(0:dPol.ndof-1);

  // Compute the global variables -------------------------------------------------------------------------------------
  Areai = Th.measure;	// Current area
  dAreadt = (Areai-AreaP)/dt; // time-derivative of the area (backward)
  //-------------------------------------------------------------------------------------------------------------------

  // Export data ------------------------------------------------------------------------------------------------------
  if(iterTime % dsave == 0 && bsave==1){

    string simulHomeDir = rootDir+"/"+simulNames[iSimul];
    string fileNameGlobalSol = "/global_sol.csv";
    string fileNameLocalSol = "/local_sol/sol_"+(1000000+iterTime)+".txt";
    string fileNameMsh = "/msh/mesh_"+(1000000+iterTime)+".msh";

    // Save {px, py, vx, vy, dpxdx, dpxdy, dpydx, dpydy, dvxdx, dvxdy, dvydx, dvydy, 
    // dpxdxx, dpxdxy, dpxdyx, dpxdyy, dpydxx, dpydxy, dpydyx, dpydyy} on each vertex:
    // Memory efficient method, but needs connectivity data to reconstruct the mesh
    {ofstream fileLocalSols (simulHomeDir+fileNameLocalSol);
      
      fileLocalSols.fixed;
      int NbVertices = Th.nv;
      fileLocalSols << "# LocalSolutions" << endl
                    << "# NumFields: " << 20 << "	NumberVertices: " << NbVertices << " cut: " << cut << " a: " << a << " b: " << b << " c: " << c << endl
                    << "# px	py	vx	vy	dpxdx	dpxdy	dpydx	dpydy	dvxdx	dvxdy	dvydx	dvydy	" 
                    << "dpxdxx	dpxdxy	dpxdyx	dpxdyy	dpydxx	dpydxy	dpydyx	dpydyy" << endl;
      for (int i = 0; i < NbVertices; i++){
        fileLocalSols << px(Th(i).x,Th(i).y) << "	" << py(Th(i).x,Th(i).y) 	   << "	"  // {px,py}
                << vx(Th(i).x,Th(i).y)       << "	" << vy(Th(i).x,Th(i).y)     << "	"  // {vx,vy}
                << dpxdx(Th(i).x,Th(i).y)    << "	" << dpxdy(Th(i).x,Th(i).y)  << "	"  // {dpxdx,dpxdy}
                << dpydx(Th(i).x,Th(i).y)    << "	" << dpydy(Th(i).x,Th(i).y)  << "	"  // {dpydx,dpydy}
                << dvxdx(Th(i).x,Th(i).y)    << "	" << dvxdy(Th(i).x,Th(i).y)  << "	"  // {dvxdx,dvxdy}
                << dvydx(Th(i).x,Th(i).y)    << "	" << dvydy(Th(i).x,Th(i).y)  << "	"  // {dvydx,dvydy}
                << dpxdxx(Th(i).x,Th(i).y)   << "	" << dpxdxy(Th(i).x,Th(i).y) << "	"  // {dpxdxx,dpxdxy}
                << dpxdyx(Th(i).x,Th(i).y)   << "	" << dpydyy(Th(i).x,Th(i).y) << "	"  // {dpxdyx,dpxdyy}
                << dpydxx(Th(i).x,Th(i).y)   << "	" << dpydxy(Th(i).x,Th(i).y) << "	"  // {dpydxx,dpydxy}
                << dpydyx(Th(i).x,Th(i).y)   << "	" << dpydyy(Th(i).x,Th(i).y) << endl;  // {dpydyx,dpydyy}
      }
    }

    // Save Global Data (variables integratet over the domain)
    {ofstream fileGlobalSol (simulHomeDir+fileNameGlobalSol, append);
      
      fileGlobalSol.fixed;
      fileGlobalSol	<< iterTime*dt << "," << Areai << "," << dAreadt << endl;
    }

    // save the last mesh
    savemesh(Th,simulHomeDir+fileNameMsh);
  }
  //-------------------------------------------------------------------------------------------------------------------

  // Plot v -----------------------------------------------------------------------------------------------------------
  if (debug) { // Show it always, regardless of the verbosity
    Pola vABS = sqrt(vx(x,y)^2 + vy(x,y)^2);
    Pola vCurl = dvydx(x,y) - dvxdy(x,y);
    Pola pABS = sqrt(px(x,y)^2 + py(x,y)^2);
    plot(/*Th,[NDerP1,NDerP2],*/vCurl,/*vABS,/*normal,vDiv,*/ 
      value = true, 
      fill = true, 
      nbiso = 64, 
      wait = false, 
      bb=bb=[[-1.1*Ly,-Ly],[Ly,Ly]],
      cmm = "iTime="+(iterTime)+"; "
        +"t="+(dt*iterTime)+"; "
        +"A/A0="+(Areai/Area0)+"; "
    );
  }
  //-------------------------------------------------------------------------------------------------------------------

  
// Remeshing --------------------------------------------------------------------------------------------------------
  try{
    // Move mesh
    //real minT0 = checkmovemesh(Th, [x, y]); // to check for flipped triangles
    // real minT = checkmovemesh(Th, [x+dt*vx,y+dt*vy]);
    // cout << "Min triangle area before: "+minT0+" & after: "+minT<<endl;
    Th = movemesh(Th,[x+dt*vx,y+dt*vy]);

    Th = periodicRemesh1FreeBnd(Th,obd,ibd,bLayerThickness,.5,labels) // Custom mesh adaptation
  }
  catch(...) {
    cout << "ERROR: Simulation "+simulNames[iSimul]+" stopped after "+iterTime+" iterations due to a remeshing error" << endl;
    err = 1;
    break;
  }
  //-------------------------------------------------------------------------------------------------------------------

// Stop simulations for big or small enough areas -------------------------------------------------------------------
  if((Areai > rateMaxArea*Area0) || (Areai < rateMinArea*Area0)){
    cout << "WARNING: Simulation "+simulNames[iSimul]+" stopped after "+iterTime+" iterations due to too big/small area" << endl;
    err = 1;
    break;
  }
  //-------------------------------------------------------------------------------------------------------------------
}

if (!err){
  cout << "Simulation"+simulNames[iSimul]+" finished without errors" << endl;
}

