// PACKAGES FOR ADVANCED REMESHING SCHEME
load "Curvature"
load "distance"
load "isoline"
load "gsl"

//include <iostream>;

verbosity=0;
string SimulName = "Test custom remesh";

real Lx = 1.;
real Ly = 2.;
real Lc = .2;
real bLayerThickness = .2;	// Thickness of the boundary layer
int obd = 90;								// Outer boundary node density
int ibd = 15;								// Inner boundary node density

real finalAmp = .75;
int NiterTime = 500;
real dt = finalAmp/NiterTime;

// Mesh identifiers
int labelBottom = 1;
int labelRight = 2;
int labelTop = 3;
int labelLeft = 4;
int[int] labs =[labelBottom,labelRight,labelTop,labelLeft];

macro pD [pDx, pDy]																// P2 extension for Dirichlet data
macro p [px, py]																	// Polarity vector field
macro q [qx, qy]																	// Polarity test functions

macro grad(u) [dx(u),dy(u)]												// Gradient of a sclar

real c = Lx/Lc;  		 		 		          						// R0 and nematic length ratio

func perio=[[1,x],[3,x]]; // Periodicity

mesh Th0 = square(lrint(ibd*Lx), lrint(ibd*Ly), [Lx*(x-1), Ly*(y-.5)],label=labs);

plot(Th0, wait=1, cmm="Initial Mesh Semiplane");


int[int] be(1); // To save begin and ends of the curve
int minPoints = 5;

// Extract outer boundary pieces
real[int,int] bTop(3,1); real lTop=extractborder(Th0,labelTop,bTop); // extract Top border
real[int,int] bRight(3,1); real lRight=extractborder(Th0,labelRight,bRight); // extract right border
real[int,int] bBottom(3,1); real lBottom=extractborder(Th0,labelBottom,bBottom); // extract bottom border
real[int,int] bLeft(3,1); real lLeft=extractborder(Th0,labelLeft,bLeft); // extract left border

// Remesh the Right (free boundary) using an spline
gslspline splineX(gslinterpakima, bRight(2, :), bRight(0, :)); 	// x(s) akima spline
gslspline splineY(gslinterpakima, bRight(2, :), bRight(1, :)); 	// y(s) akima spline
border Right(t=0,lRight){x=splineX(t);y=splineY(t);label=labelRight;}
int nRight = round(obd*lRight);	// new number of elements (prescribed density obd)

// Ensure that x coordinates of top and bottom are the same
cout << bTop(0,:) << endl;
cout << bTop(0,) << endl;

// A.2(a). LINEAR INTERPOLATION OF b1 (simple and robust, but bad for preserving shape integrity)
// border Outer(t=0,1){ P=Curve(b1,t);label=1;}
// int nO = round(obd*l1);  */						// new number of elements (prescribed density obd)


