// PACKAGES FOR ADVANCED REMESHING SCHEME
load "Curvature"
load "distance"
load "isoline"
load "gsl"

int obd = 40;
int ibd = 15;

int nDfm = 7;

int NiterTime = 200;
real dt = 1./NiterTime;

real bLayerThickness = .25;

int labelOut = 1;
int labelInner = 2;

border circ(t=0,2*pi){x=cos(t); y=sin(t); label=labelOut;}
mesh Th = buildmesh(circ(2*pi*ibd));

// plot(Th, wait=1);

// border circperturb(t=0,2*pi){x=(1+Amp*cos(nDfm*t))*cos(t); y=(1+Amp*cos(nDfm*t))*sin(t); label=labelOut;}
// mesh Th = buildmesh(circperturb(2*pi*ibd));

plot(Th, wait=1);


// FEM Spaces
fespace Dh(Th, P1); // For distance function (remeshing scheme) and data exports
fespace Vel(Th,[P1b,P1b]); // For the deformation velocity

// Macros
macro v [v1, v2]  // Velocity field
macro u [u1, u2]	// Velocity test function

func mesh closedRemesh(mesh Th0,int obd, int ibd, int labelOut, real smoothCoef){

  int[int] be(1); // To save begin and ends of the curve
  int minPoints = 5;

  // Extract outer boundary
  real[int,int] bOut(3,1); real lOut = extractborder(Th0, labelOut, bOut);

  // Remesh the outr boundary using an Akima spline
  gslspline splineX(gslinterpakima, bOut(2,:), bOut(0,:));
  gslspline splineY(gslinterpakima, bOut(2,:), bOut(1,:));

  border Out(t=0,lOut){x=splineX(t); y=splineY(t); label=labelOut;}
  int nOut = round(obd*lOut);

  // Distance function (d is the minimal distance to the boundary)
  varf vong(B, d)= on(labelOut,B=1);
  real[int] ong=vong(0,Dh);
  Dh B =1, d;
  B[] = ong ? 0 : B[];
  distance(Th0,B,d[]);
  // plot(d,Th0, wait=1);

  // Get the new inner boundary vertices (ISO is the contour d==bLayerThickness)
  real[int,int] ISO(3,1); int nc=isoline(Th0,d,iso=bLayerThickness,close=0,ISO,beginend=be,smoothing=bLayerThickness*smoothCoef,ratio=1.e0);
  
  int nInnerLoops = be.n/2;
  // cout << be << endl;

  int[int] nInner(nInnerLoops); // numer of points per loop
  int nCorrectLoops = 0; // number of loops with more than minPoints
  // find number of points and count > minPoints
  for (int i=0;  i < nInnerLoops; i++){
    real lInner=ISO(2,be(i*2+1)-1);
    nInner[i] = round(ibd*lInner);
    if(nInner[i] > minPoints){nCorrectLoops++;}
  }

  // if the number of points is less than minPoints, filter the border for safety
  int[int] nInnerFilter(nCorrectLoops);
  int[int] beFilter(2*nCorrectLoops);

  for (int i=0;  i < nInnerLoops; i++){
    if(nInner[i] > minPoints){
      nInnerFilter[i] = nInner[i];
      beFilter[2*i] = be[i*2];
      beFilter[2*i+1] = be[i*2+1];
    }
  }
  
  border Inner(t=0,1;i) {P=Curve(ISO,beFilter(i*2),beFilter(i*2+1)-1,t);} // Inner boundary multi-border
  // cout << nInner << endl;

  // plot(Out(nOut),Inner(nInnerFilter)/*, wait=1*/);
  mesh Th = buildmesh(Out(nOut)+Inner(nInnerFilter));
  Th = change(Th, rmInternalEdges=1);

  return Th;
}

Th = closedRemesh(Th,obd,ibd,labelOut,.5);
plot(Th, wait=1, cmm="Initial Mesh");

// Iterate time
for (int iterTime=0 ; iterTime<NiterTime ; iterTime++) {

  // Define a test velocity at the boundary (null in the bulk)
  varf bndDirichlet(v, u) = on(labelOut, v1 = cos(nDfm*atan2(y,x))*cos(atan2(y,x))) + on(labelOut, v2 = cos(nDfm*atan2(y,x))*sin(atan2(y,x)));
  Vel v=[0,0];
  v1[] = bndDirichlet(0, Vel, tgv = 1.0);

	// Move mesh
	// real minT0 = checkmovemesh(Th, [x, y]); // to check for flipped triangles
	// real minT = checkmovemesh(Th, [x+dt*V1,y+dt*V2]);
	// cout << "Min triangle area before: "+minT0+" & after: "+minT<<endl;
	Th = movemesh(Th,[x+dt*v1,y+dt*v2]);

  // Remesh
  Th = closedRemesh(Th,obd,ibd,labelOut,0);
  
  plot(Th, wait=false, cmm="Time = "+(1+iterTime)*dt);
}




