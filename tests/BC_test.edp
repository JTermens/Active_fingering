// PACKAGES FOR ADVANCED REMESHING SCHEME
load "Curvature"
load "distance"
load "isoline"
load "gsl"

//include <iostream>;

verbosity=1;
string SimulName = "Test BC";

real Lx = 1;
real bLayerThickness = .2;	// Thickness of the boundary layer
int obd = 90;								// Outer boundary node density
int ibd = 15;								// Inner boundary node density

real finalAmp = .5;
int NiterTime = 400;
real dt = finalAmp/NiterTime;

// Mesh identifiers
int labelBottom = 1;
int labelRight = 2;
int labelTop = 3;
int labelLeft = 4;

func perio=[[1,x],[3,x]]; // Periodicity

func mesh symmetricSemiplane(int obd, int ibd, real bLayerThickness, real Lx){

	real Ly = 1;
	int[int] labelChange = [labelTop,labelBottom];

	mesh Th,ThHalfTop,ThHalfBottom,Thb; // Final mesh (Th) + auxyliary meshes

	// Defien the borders for both the bulk and the layer meshes
	border Bottom(t=0, 1){x=-Lx+(Lx-bLayerThickness)*t; y=0; label=labelBottom;}
	border BottomLayer(t=0, 1){x=bLayerThickness*(t-1); y=0; label=labelBottom;}

	border Top(t=0, 1){x=-bLayerThickness-(Lx-bLayerThickness)*t; y=.5*Ly; label=labelTop;}
	border TopLayer(t=0, 1){x=-bLayerThickness*t; y=.5*Ly; label=labelTop;}

	border Left(t=0,1){x=-Lx; y=.5*Ly*(1-t); label=labelLeft;}

	// change for a perturbed front, if needed. Mantain extreme points at x=0
	border Right(t=0,1){x=0; y=.5*Ly*t; label=labelRight;}
	border Inner(t=0,1){x=-bLayerThickness; y=.5*Ly*t;}


	ThHalfTop = buildmesh(
		Bottom(ibd*(Lx-bLayerThickness))
		+ BottomLayer(obd*bLayerThickness)
		+ Right(obd*.5*Ly)
		+ Inner(obd*.5*Ly)
		+ TopLayer(obd*bLayerThickness)
		+ Top(ibd*(Lx-bLayerThickness))
		+ Left(ibd*.5*Ly)
	);

	ThHalfBottom = movemesh(ThHalfTop,[x,-y]);
	ThHalfBottom = change(ThHalfBottom, label=labelChange);

	Th = ThHalfTop + ThHalfBottom;
	Th = change(Th,rmInternalEdges=1);

	return Th;
}

func mesh symmetricStripe(int obd, int ibd, real bLayerThickness, real Lx){

	real Ly = 1;
	int[int] labelChange = [labelTop,labelBottom];

	mesh Th,ThHalfTop,ThHalfBottom,Thb; // Final mesh (Th) + auxyliary meshes

	// Defien the borders for both the bulk and the layer meshes
	border Bottom(t=0, 1){x=-(Lx-bLayerThickness)+2*(Lx-bLayerThickness)*t; y=0; label=labelBottom;}
	border BottomLayerRight(t=0, 1){x=(Lx-bLayerThickness)+bLayerThickness*t; y=0; label=labelBottom;}
	border BottomLayerLeft(t=0, 1){x=-Lx+bLayerThickness*t; y=0; label=labelBottom;}

	border Top(t=0, 1){x=(Lx-bLayerThickness)-2*(Lx-bLayerThickness)*t; y=.5*Ly; label=labelTop;}
	border TopLayerRight(t=0, 1){x=Lx-bLayerThickness*t; y=.5*Ly; label=labelTop;}
	border TopLayerLeft(t=0, 1){x=-(Lx-bLayerThickness)-bLayerThickness*t; y=.5*Ly; label=labelTop;}


	// change for a perturbed front, if needed. Mantain extreme points at x=0
	border Right(t=0,1){x=Lx; y=.5*Ly*t; label=labelRight;}
	border InnerRight(t=0,1){x=Lx-bLayerThickness; y=.5*Ly*t;}

	border Left(t=0,1){x=-Lx; y=.5*Ly*(1-t); label=labelLeft;}
	border InnerLeft(t=0,1){x=-(Lx-bLayerThickness); y=.5*Ly*(1-t);}

		ThHalfTop = buildmesh(
		BottomLayerLeft(obd*bLayerThickness)
		+ Bottom(ibd*2*(Lx-bLayerThickness))
		+ BottomLayerRight(obd*bLayerThickness)
		+ TopLayerLeft(obd*bLayerThickness)
		+ Top(ibd*2*(Lx-bLayerThickness))
		+ TopLayerRight(obd*bLayerThickness)
		+ Right(obd*.5*Ly)
		+ InnerRight(obd*.5*Ly)
		+ Left(obd*.5*Ly)
		+ InnerLeft(obd*.5*Ly)
		);

	ThHalfBottom = movemesh(ThHalfTop,[x,-y]);
	ThHalfBottom = change(ThHalfBottom, label=labelChange);

	Th = ThHalfTop + ThHalfBottom;
	Th = change(Th,rmInternalEdges=1);

	return Th;
}

// mesh Th = symmetricSemiplane(obd, ibd, bLayerThickness, Lx);
// mesh Th = symmetricStripe(obd, ibd, bLayerThickness, 2);
// fespace Dh(Th, P1);	 // For distance function, distance function does not work with periodic fespace

func mesh periodicRemesh1side(mesh Th0,int obd, int ibd, real smoothCoef){

	int[int] be(1); // To save begin and ends of the curve
  int minPoints = 5;

	// Extract outer boundary pieces
	real[int,int] bTop(3,1); real lTop=extractborder(Th0,labelTop,bTop); // extract Top border
	real[int,int] bRight(3,1); real lRight=extractborder(Th0,labelRight,bRight); // extract right border
	real[int,int] bBottom(3,1); real lBottom=extractborder(Th0,labelBottom,bBottom); // extract bottom border
	real[int,int] bLeft(3,1); real lLeft=extractborder(Th0,labelLeft,bLeft); // extract left border

	// Remesh the Right (free boundary) using an spline
	gslspline splineX(gslinterpakima, bRight(2, :), bRight(0, :)); 	// x(s) akima spline
	gslspline splineY(gslinterpakima, bRight(2, :), bRight(1, :)); 	// y(s) akima spline
	border Right(t=0,lRight){x=splineX(t);y=splineY(t);label=labelRight;}
	int nRight = round(obd*lRight);	// new number of elements (prescribed density obd)

	// Keep the same vertices for the fixed sides
	border Top(t=0,1){ P=Curve(bTop,bTop(2,round(t*(bTop.m-1)))/lTop);label=labelTop;}
	border Bottom(t=0,1){ P=Curve(bBottom,bBottom(2,round(t*(bBottom.m-1)))/lBottom);label=labelBottom;}
	border Left(t=0,1){ P=Curve(bLeft,bLeft(2,round(t*(bLeft.m-1)))/lLeft);label=labelLeft;}

	// fespace Dh(Th0, P1);	 // Uncomment generates segmentation fault, don't know why could not be defined here

	// // Distance function (d is the minimal distance to the boundary)
  // varf vong(B, d)= on(labelRight,B=1);
  // real[int] ong=vong(0,Dh);
  // Dh B =1, d;
  // B[] = ong ? 0 : B[];
  // distance(Th0,B,d[]);
  // //plot(d,Th0, wait=1);

  // // Get the new inner boundary vertices (ISO is the contour d==bLayerThickness)
  // real[int,int] ISO(3,1); int nc=isoline(Th0,d,iso=bLayerThickness,close=0,ISO,beginend=be,smoothing=bLayerThickness*smoothCoef,ratio=1.e0);
  
  // int nInnerLines = be.n/2;
  // // cout << be << endl;

  // int[int] nInner(nInnerLines); // numer of points per loop
  // int nCorrectLines = 0; // number of loops with more than minPoints
  // // find number of points and count > minPoints
  // for (int i=0;  i < nInnerLines; i++){
  //   real lInner=ISO(2,be(i*2+1)-1);
  //   nInner[i] = round(obd*lInner);
  //   if(nInner[i] > minPoints){nCorrectLines++;}
  // }
	
  // // if the number of points is less than minPoints, filter the border for safety
  // int[int] nInnerFilter(nCorrectLines);
  // int[int] beFilter(2*nCorrectLines);

  // for (int i=0;  i < nInnerLines; i++){
  //   if(nInner[i] > minPoints){
  //     nInnerFilter[i] = nInner[i];
  //     beFilter[2*i] = be[i*2];
  //     beFilter[2*i+1] = be[i*2+1];
  //   }
  // }
  
  // border Inner(t=0,1;i) {P=Curve(ISO,beFilter(i*2),beFilter(i*2+1)-1,t);} // Inner boundary multi-border
	// cout << nInner << endl;

	// plot(buildmesh(Left(bLeft.m-1)+Bottom(bBottom.m-1)+Right(nRight)+Top(bTop.m-1)+Inner(nInnerFilter)), wait=1);
	mesh Th = buildmesh(Left(bLeft.m-1)+Bottom(bBottom.m-1)+Right(nRight)+Top(bTop.m-1)/*+Inner(nInnerFilter)*/);
	Th = change(Th, rmInternalEdges=1);

  return Th;
}

func mesh periodicRemesh2side(mesh Th0,int obd, int ibd, real smoothCoef){

	int[int] be(1); // To save begin and ends of the curve
  int minPoints = 5;

	// Extract outer boundary pieces
	real[int,int] bTop(3,1); real lTop=extractborder(Th0,labelTop,bTop); // extract Top border
	real[int,int] bRight(3,1); real lRight=extractborder(Th0,labelRight,bRight); // extract right border
	real[int,int] bBottom(3,1); real lBottom=extractborder(Th0,labelBottom,bBottom); // extract bottom border
	real[int,int] bLeft(3,1); real lLeft=extractborder(Th0,labelLeft,bLeft); // extract left border

	// Remesh the Right and Left (free boundaries) using an splines
	gslspline splineXRight(gslinterpakima, bRight(2, :), bRight(0, :)); 	// x(s) akima spline
	gslspline splineYRight(gslinterpakima, bRight(2, :), bRight(1, :)); 	// y(s) akima spline
	border Right(t=0,lRight){x=splineXRight(t);y=splineYRight(t);label=labelRight;}
	int nRight = round(obd*lRight);	// new number of elements (prescribed density obd)

	gslspline splineXLeft(gslinterpakima, bLeft(2, :), bLeft(0, :)); 	// x(s) akima spline
	gslspline splineYLeft(gslinterpakima, bLeft(2, :), bLeft(1, :)); 	// y(s) akima spline
	border Left(t=0,lLeft){x=splineXLeft(t);y=splineYLeft(t);label=labelLeft;}
	int nLeft = round(obd*lLeft);	// new number of elements (prescribed density obd)

	// Keep the same vertices for the fixed sides
	border Top(t=0,1){ P=Curve(bTop,bTop(2,round(t*(bTop.m-1)))/lTop);label=labelTop;}
	border Bottom(t=0,1){ P=Curve(bBottom,bBottom(2,round(t*(bBottom.m-1)))/lBottom);label=labelBottom;}

	// fespace Dh(Th0, P1);	 // Uncomment generates segmentation fault, don't know why could not be defined here

	// // Distance function (d is the minimal distance to the boundary)
  // varf vong(B, d)= on(labelRight,B=1) + on(labelLeft,B=1);
  // real[int] ong=vong(0,Dh);
  // Dh B =1, d;
  // B[] = ong ? 0 : B[];
  // distance(Th0,B,d[]);
  // // plot(d,Th0, wait=1);

	
  // // Get the new inner boundary vertices (ISO is the contour d==bLayerThickness)
  // real[int,int] ISO(3,1); int nc=isoline(Th0,d,iso=bLayerThickness,close=0,ISO,beginend=be,smoothing=bLayerThickness*smoothCoef,ratio=1.e0);
  
  // int nInnerLines = be.n/2;
  // // cout << be << endl;

  // int[int] nInner(nInnerLines); // numer of points per loop
  // int nCorrectLines = 0; // number of loops with more than minPoints
  // // find number of points and count > minPoints
  // for (int i=0;  i < nInnerLines; i++){
  //   real lInner=ISO(2,be(i*2+1)-1);
  //   nInner[i] = round(obd*lInner);
  //   if(nInner[i] > minPoints){nCorrectLines++;}
  // }
	
  // // if the number of points is less than minPoints, filter the border for safety
  // int[int] nInnerFilter(nCorrectLines);
  // int[int] beFilter(2*nCorrectLines);

  // for (int i=0;  i < nInnerLines; i++){
  //   if(nInner[i] > minPoints){
  //     nInnerFilter[i] = nInner[i];
  //     beFilter[2*i] = be[i*2];
  //     beFilter[2*i+1] = be[i*2+1];
  //   }
  // }
  
  // border Inner(t=0,1;i) {P=Curve(ISO,beFilter(i*2),beFilter(i*2+1)-1,t);} // Inner boundary multi-border
	// // cout << nInner << endl;

	// plot(Left(nLeft)+Bottom(bBottom.m-1)+Right(nRight)+Top(bTop.m-1)+Inner(nInnerFilter), wait=1);
	mesh Th = buildmesh(Left(nLeft)+Bottom(bBottom.m-1)+Right(nRight)+Top(bTop.m-1)/*+Inner(nInnerFilter)*/);
	Th = change(Th, rmInternalEdges=1);
	
  return Th;
}

mesh Th = symmetricSemiplane(obd, ibd, bLayerThickness, Lx);
// mesh Th = symmetricStripe(obd, ibd, bLayerThickness, 2);

plot(Th, wait=1, cmm="Initial Mesh Semiplane");
//Th = periodicRemesh1side(Th,obd,ibd,.5);
plot(Th, wait=1, cmm="1 Remesh Semiplane");

// plot(Th, wait=1, cmm="Initial Mesh Stripe");
// Th = periodicRemesh2side(Th,obd,ibd,.5);
// plot(Th, wait=1, cmm="1 Remesh Stripe");


real Area0=Th.measure; // Inital Area of the Fluid Domain
real lenFront = int1d(Th, labelRight)(1.);	// Front length

int nDfm = 1;
fespace Vel(Th,[P1b,P1b], periodic=perio); // For the deformation velocity

macro v [v1, v2]  // Velocity field
macro u [u1, u2]	// Velocity test function


// Iterate time
for (int iterTime=0 ; iterTime<NiterTime ; iterTime++) {

  // Define a test velocity at the boundary (null in the bulk)
  varf bndDirichlet(v, u) = on(labelRight, v1 = .1*sin(y*(2.*pi)))/*+on(labelLeft, v1 = -2*cos(y*(2.*pi)))*/;
  Vel v=[0,0];
  v1[] = bndDirichlet(0, Vel, tgv = 1.0);

	// Move mesh
	// real minT0 = checkmovemesh(Th, [x, y]); // to check for flipped triangles
	// real minT = checkmovemesh(Th, [x+dt*V1,y+dt*V2]);
	// cout << "Min triangle area before: "+minT0+" & after: "+minT<<endl;
	Th = movemesh(Th,[x+dt*v1,y+dt*v2]);

  // Remesh
  Th = periodicRemesh1side(Th,obd,ibd,.5);
	//Th = periodicRemesh2side(Th,obd,ibd,.5);
  
  plot(Th,[v1,v2], wait=false, cmm="Time = "+(1+iterTime)*dt);
}
