// PACKAGES FOR ADVANCED REMESHING SCHEME
load "Curvature"
load "distance"
load "isoline"
load "gsl"

//include <iostream>;

verbosity=1;
string SimulName = "Test adaptmesh";

real Lx = 1.;
real Ly = 2.;
real Lc = .2;
real bLayerThickness = .2;	// Thickness of the boundary layer
real obd = 90;								// Outer boundary node density
real ibd = 15;								// Inner boundary node density

real finalAmp = .75;
int NiterTime = 500;
real dt = finalAmp/NiterTime;

// Mesh identifiers
int labelBottom = 1;
int labelRight = 2;
int labelTop = 3;
int labelLeft = 4;
int[int] labs =[labelBottom,labelRight,labelTop,labelLeft];

macro pD [pDx, pDy]																// P2 extension for Dirichlet data
macro p [px, py]																	// Polarity vector field
macro q [qx, qy]																	// Polarity test functions

macro grad(u) [dx(u),dy(u)]												// Gradient of a sclar

real c = Lx/Lc;  		 		 		          						// R0 and nematic length ratio

func perio=[[1,x],[3,x]]; // Periodicity

func mesh symmetricSemiplane(int obd, int ibd, real bLayerThickness, real Lx){

	real Ly = 1;
	int[int] labelChange = [labelTop,labelBottom];

	mesh Th,ThHalfTop,ThHalfBottom,Thb; // Final mesh (Th) + auxyliary meshes

	// Defien the borders for both the bulk and the layer meshes
	border Bottom(t=0, 1){x=-Lx+(Lx-bLayerThickness)*t; y=0; label=labelBottom;}
	border BottomLayer(t=0, 1){x=bLayerThickness*(t-1); y=0; label=labelBottom;}

	border Top(t=0, 1){x=-bLayerThickness-(Lx-bLayerThickness)*t; y=.5*Ly; label=labelTop;}
	border TopLayer(t=0, 1){x=-bLayerThickness*t; y=.5*Ly; label=labelTop;}

	border Left(t=0,1){x=-Lx; y=.5*Ly*(1-t); label=labelLeft;}

	// change for a perturbed front, if needed. Mantain extreme points at x=0
	border Right(t=0,1){x=0; y=.5*Ly*t; label=labelRight;}
	border Inner(t=0,1){x=-bLayerThickness; y=.5*Ly*t;}


	ThHalfTop = buildmesh(
		Bottom(ibd*(Lx-bLayerThickness))
		+ BottomLayer(obd*bLayerThickness)
		+ Right(obd*.5*Ly)
		+ Inner(obd*.5*Ly)
		+ TopLayer(obd*bLayerThickness)
		+ Top(ibd*(Lx-bLayerThickness))
		+ Left(ibd*.5*Ly)
	);

	ThHalfBottom = movemesh(ThHalfTop,[x,-y]);
	ThHalfBottom = change(ThHalfBottom, label=labelChange);

	Th = ThHalfTop + ThHalfBottom;
	Th = change(Th,rmInternalEdges=1);

	return Th;
}

func mesh periodicRemesh1side(mesh Th0,int obd, int ibd, real smoothCoef){

	int[int] be(1); // To save begin and ends of the curve
  int minPoints = 5;

	// Extract outer boundary pieces
	real[int,int] bTop(3,1); real lTop=extractborder(Th0,labelTop,bTop); // extract Top border
	real[int,int] bRight(3,1); real lRight=extractborder(Th0,labelRight,bRight); // extract right border
	real[int,int] bBottom(3,1); real lBottom=extractborder(Th0,labelBottom,bBottom); // extract bottom border
	real[int,int] bLeft(3,1); real lLeft=extractborder(Th0,labelLeft,bLeft); // extract left border

	// Remesh the Right (free boundary) using an spline
	gslspline splineX(gslinterpakima, bRight(2, :), bRight(0, :)); 	// x(s) akima spline
	gslspline splineY(gslinterpakima, bRight(2, :), bRight(1, :)); 	// y(s) akima spline
	border Right(t=0,lRight){x=splineX(t);y=splineY(t);label=labelRight;}
	int nRight = round(obd*lRight);	// new number of elements (prescribed density obd)

	// Keep the same vertices for the fixed sides
	border Top(t=0,1){ P=Curve(bTop,bTop(2,round(t*(bTop.m-1)))/lTop);label=labelTop;}
	border Bottom(t=0,1){ P=Curve(bBottom,bBottom(2,round(t*(bBottom.m-1)))/lBottom);label=labelBottom;}
	
	border Left(t=0,1){ P=Curve(bLeft,bLeft(2,round(t*(bLeft.m-1)))/lLeft);label=labelLeft;}

	// fespace Dh(Th0, P1);	 // Uncomment generates segmentation fault, don't know why could not be defined here

	// // Distance function (d is the minimal distance to the boundary)
  // varf vong(B, d)= on(labelRight,B=1);
  // real[int] ong=vong(0,Dh);
  // Dh B =1, d;
  // B[] = ong ? 0 : B[];
  // distance(Th0,B,d[]);
  // //plot(d,Th0, wait=1);

  // // Get the new inner boundary vertices (ISO is the contour d==bLayerThickness)
  // real[int,int] ISO(3,1); int nc=isoline(Th0,d,iso=bLayerThickness,close=0,ISO,beginend=be,smoothing=bLayerThickness*smoothCoef,ratio=1.e0);
  
  // int nInnerLines = be.n/2;
  // // cout << be << endl;

  // int[int] nInner(nInnerLines); // numer of points per loop
  // int nCorrectLines = 0; // number of loops with more than minPoints
  // // find number of points and count > minPoints
  // for (int i=0;  i < nInnerLines; i++){
  //   real lInner=ISO(2,be(i*2+1)-1);
  //   nInner[i] = round(obd*lInner);
  //   if(nInner[i] > minPoints){nCorrectLines++;}
  // }
	
  // // if the number of points is less than minPoints, filter the border for safety
  // int[int] nInnerFilter(nCorrectLines);
  // int[int] beFilter(2*nCorrectLines);

  // for (int i=0;  i < nInnerLines; i++){
  //   if(nInner[i] > minPoints){
  //     nInnerFilter[i] = nInner[i];
  //     beFilter[2*i] = be[i*2];
  //     beFilter[2*i+1] = be[i*2+1];
  //   }
  // }
  
  // border Inner(t=0,1;i) {P=Curve(ISO,beFilter(i*2),beFilter(i*2+1)-1,t);} // Inner boundary multi-border
	// cout << nInner << endl;

	// plot(buildmesh(Left(bLeft.m-1)+Bottom(bBottom.m-1)+Right(nRight)+Top(bTop.m-1)+Inner(nInnerFilter)), wait=1);
	mesh Th = buildmesh(Left(bLeft.m-1)+Bottom(bBottom.m-1)+Right(nRight)+Top(bTop.m-1)/*+Inner(nInnerFilter)*/);
	Th = change(Th, rmInternalEdges=1);

  return Th;
}

// mesh Th0 = symmetricSemiplane(obd, ibd, bLayerThickness, Lx);
// mesh Th = symmetricStripe(obd, ibd, bLayerThickness, 2);

mesh Th = square(lrint(ibd*Lx), lrint(ibd*Ly), [Lx*(x-1), Ly*(y-.5)],label=labs);

plot(Th, wait=1, cmm="Initial Mesh Semiplane");

fespace Pol(Th, [P2, P2], periodic=perio);					  // For polarity vector
fespace Pola(Th, P2, periodic=perio);							// For |p| (not essential, just visualization)

// P2 extension of polarity Dirichlet data
varf bndDirichlet(pD, q) = on(labelRight, pDx = N.x) + on(labelRight, pDy = N.y) + on(labelLeft, pDx = 0) + on(labelLeft, pDy = 0);// + on(labelRight, p1 = nx) + on(labelRight, p2 = ny);
Pol pD=[0,0];
pDx[] = bndDirichlet(0, Pol, tgv = 1.0);

// Bilinear and linear variational forms P (Modified Homogeneous Drirchlet problem for p-pD)
varf ap(p, q) = int2d(Th)(  grad(px)'*grad(qx) + grad(py)'*grad(qy) )  + int2d(Th)(c*c*(p'*q)) + on(labelRight, px = 0.0) + on(labelRight, py=0.0) + on(labelLeft, px = 0.0) + on(labelLeft, py=0.0);
varf lp(p, q) = -int2d(Th)( grad(pDx)'*grad(qx) + grad(pDy)'*grad(qy) ) - int2d(Th)(c*c*(pD'*q))  + on(labelRight, px = 0.0) + on(labelRight, py=0.0) + on(labelLeft, px = 0.0) + on(labelLeft, py=0.0);

// Assembly P
matrix Ap = ap(Pol, Pol, tgv = -2); // LHS matrix
real[int] bp = lp(0, Pol); // RHS

// P solution with vanishing Dirichlet data
real[int] solP(Pol.ndof);
//set(Ap,solver=sparsesolver);
solP=Ap^-1*bp;
Pol p=[0,0];
px[]=solP(0:Pol.ndof-1);

// P solution
p = p + pD;

Pola pABS = sqrt(px(x,y)^2 + py(x,y)^2); // Abs(P)
plot(Th,pABS, value = true, fill = true, nbiso = 64, wait = true, cmm = "|p|", bb=[[-1.1*Lx,-Ly],[1.5,Ly]]);

Th = adaptmesh(Th,p,hmax=1./ibd,periodic=perio, iso=true); // adapt mesh based on the polarity solution
plot(Th, wait=1, cmm="1st iteration Mesh Semiplane");


real Area0=Th.measure; // Inital Area of the Fluid Domain
real lenFront = int1d(Th, labelRight)(1.);	// Front length

int nDfm = 1;
fespace Vel(Th,[P1b,P1b], periodic=perio); // For the deformation velocity

macro v [v1, v2]  // Velocity field
macro u [u1, u2]	// Velocity test function


// Iterate time
for (int iterTime=0 ; iterTime<NiterTime ; iterTime++) {

	// P2 extension of polarity Dirichlet data
	varf bndDirichlet(pD, q) = on(labelRight, pDx = N.x) + on(labelRight, pDy = N.y) + on(labelLeft, pDx = 0) + on(labelLeft, pDy = 0);// + on(labelRight, p1 = nx) + on(labelRight, p2 = ny);
	Pol pD=[0,0];
	pDx[] = bndDirichlet(0, Pol, tgv = 1.0);

	// Assembly P
	varf lp(p, q) = -int2d(Th)( grad(pDx)'*grad(qx) + grad(pDy)'*grad(qy) ) - int2d(Th)(c*c*(pD'*q))  + on(labelRight, px = 0.0) + on(labelRight, py=0.0) + on(labelLeft, px = 0.0) + on(labelLeft, py=0.0);
	matrix Ap = ap(Pol, Pol, tgv = -2); // LHS matrix
	real[int] bp = lp(0, Pol); // RHS

	// P solution with vanishing Dirichlet data
	real[int] solP(Pol.ndof);
	//set(Ap,solver=sparsesolver);
	solP=Ap^-1*bp;
	Pol p=[0,0];
	px[]=solP(0:Pol.ndof-1);

	// P solution
	p = p + pD;

  // Define a test velocity at the boundary (null in the bulk)
  varf bndVel(v, u) = on(labelRight, v1 = .1*sin(y*(2.*pi)));
  Vel v=[0,0];
  v1[] = bndVel(0, Vel, tgv = 1.0);

	lenFront = int1d(Th, labelRight)(1.);	// Front length

	Pola pABS = sqrt(px(x,y)^2 + py(x,y)^2); // Abs(P)
  plot(pABS,[v1,v2], wait=false,value=true, fill=true, cmm="Time = "+(1+iterTime)*dt+", Front length = "+lenFront);

	// Move mesh
	// real minT0 = checkmovemesh(Th, [x, y]); // to check for flipped triangles
	// real minT = checkmovemesh(Th, [x+dt*V1,y+dt*V2]);
	// cout << "Min triangle area before: "+minT0+" & after: "+minT<<endl;
	Th = movemesh(Th,[x+dt*v1,y+dt*v2]);

  // Remesh
	Th = adaptmesh(Th,p,hmax=1./ibd,periodic=perio, iso=true); // adapt mesh based on the polarity solution
}
